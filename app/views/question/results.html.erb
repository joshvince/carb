
<% if flash[:newsflash] %>
  <script>
    setTimeout(() => {
      const expiryDate = new Date();
      expiryDate.setDate(expiryDate.getDate() + 1);
      document.cookie = `enspuddification=true; expires=${expiryDate.toUTCString()};`;
      document.dispatchEvent(new Event('enspuddify'));
    }, 2000);
  </script>
<% end %>

<div class="flex flex-col w-screen">
  <div class="sticky top-0 z-10 bg-gradient-to-b from-yellow-50/60 via-yellow-50/40 to-transparent backdrop-blur-sm pb-6 shadow-[0_4px_6px_-1px_rgba(0,0,0,0.1)]">
    <div class="flex flex-col gap-y-2 px-6 md:px-12 py-4 mt-8">
      <h1 class="text-5xl text-amber-900 font-black">The Results</h1>
      <div class="text-xl text-amber-600 font-black">The People have spoken</div>

      <!-- Share Button (only shown if cookie exists) -->
      <div id="share-button-container" class="hidden mt-4">
        <button class="share-results-button bg-amber-600 text-white px-4 py-3 rounded-lg font-semibold text-sm hover:bg-amber-700 transition-colors duration-200 flex items-center justify-center gap-2 w-full md:w-80">
          <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8.684 13.342C8.886 12.938 9 12.482 9 12c0-.482-.114-.938-.316-1.342m0 2.684a3 3 0 110-2.684m0 2.684l6.632 3.316m-6.632-6l6.632-3.316m0 0a3 3 0 105.367-2.684 3 3 0 00-5.367 2.684zm0 9.316a3 3 0 105.367 2.684 3 3 0 00-5.367-2.684z"></path>
          </svg>
          Share My Ranking
        </button>
      </div>
    </div>
  </div>

  <div class="w-full max-w-2xl mx-auto mt-8 px-6">
    <div class="flex justify-center items-center pb-4">
      <div class="flex items-center gap-x-3">
        <span class="text-sm font-semibold text-amber-700">Corrigan Score</span>
        <button id="toggle-view" class="relative inline-flex h-6 w-11 items-center rounded-full bg-amber-200 transition-colors duration-200 ease-in-out focus:outline-none focus:ring-2 focus:ring-amber-500 focus:ring-offset-2" role="switch" aria-checked="false">
          <span class="inline-block h-4 w-4 transform rounded-full bg-white transition duration-200 ease-in-out translate-x-1"></span>
        </button>
        <span class="text-sm font-semibold text-rose-700">Havoc Ratio</span>
      </div>
    </div>
  </div>

  <div id="corrigan-score-section">
    <%= render partial: 'question/corrigan_score', locals: { totals: corrigan_score_view_data(**local_assigns)} %>
  </div>

  <div id="havoc-ratio-section" class="hidden">
    <%= render partial: 'question/weighted_havoc_ratio', locals: { totals: weighted_havoc_ratio_view_data(**local_assigns)} %>
  </div>

  <!-- Second Share Button (only shown if cookie exists) -->
  <div class="w-full max-w-2xl mx-auto my-8 px-6">
    <div id="share-button-container-bottom" class="hidden flex justify-center">
      <button class="share-results-button bg-amber-600 text-white px-6 py-3 rounded-lg font-semibold text-base hover:bg-amber-700 transition-colors duration-200 flex items-center gap-2">
        <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8.684 13.342C8.886 12.938 9 12.482 9 12c0-.482-.114-.938-.316-1.342m0 2.684a3 3 0 110-2.684m0 2.684l6.632 3.316m-6.632-6l6.632-3.316m0 0a3 3 0 105.367-2.684 3 3 0 00-5.367 2.684zm0 9.316a3 3 0 105.367 2.684 3 3 0 00-5.367-2.684z"></path>
        </svg>
        Share My Ranking
      </button>
    </div>
  </div>
</div>

<script>
document.addEventListener('DOMContentLoaded', function() {
  const toggle = document.getElementById('toggle-view');
  const corriganSection = document.getElementById('corrigan-score-section');
  const havocSection = document.getElementById('havoc-ratio-section');

  toggle.addEventListener('click', function() {
    const isChecked = toggle.getAttribute('aria-checked') === 'true';

    if (isChecked) {
      // Switch to Corrigan Score
      toggle.setAttribute('aria-checked', 'false');
      toggle.querySelector('span').classList.remove('translate-x-6');
      toggle.querySelector('span').classList.add('translate-x-1');
      toggle.classList.remove('bg-rose-200');
      toggle.classList.add('bg-amber-200');
      corriganSection.classList.remove('hidden');
      havocSection.classList.add('hidden');
    } else {
      // Switch to Havoc Ratio
      toggle.setAttribute('aria-checked', 'true');
      toggle.querySelector('span').classList.remove('translate-x-1');
      toggle.querySelector('span').classList.add('translate-x-6');
      toggle.classList.remove('bg-amber-200');
      toggle.classList.add('bg-rose-200');
      corriganSection.classList.add('hidden');
      havocSection.classList.remove('hidden');
    }
  });

  // Share Results Buttons
  const shareButtonContainer = document.getElementById('share-button-container');
  const shareButtonContainerBottom = document.getElementById('share-button-container-bottom');
  const shareResultsButtons = document.querySelectorAll('.share-results-button');

  // Check if share cookie exists and show buttons if it does
  const rankingArrayJson = getCookie('share_text');
  if (rankingArrayJson) {
    try {
      // Try to parse the JSON to make sure it's valid
      JSON.parse(rankingArrayJson);
      if (shareButtonContainer) {
        shareButtonContainer.classList.remove('hidden');
      }
      if (shareButtonContainerBottom) {
        shareButtonContainerBottom.classList.remove('hidden');
      }
    } catch (err) {
      console.error('Invalid ranking array in cookie:', err);
    }
  }

  // Add click event listeners to all share buttons
  shareResultsButtons.forEach(function(button) {
    button.addEventListener('click', async function() {
      const rankingArrayJson = getCookie('share_text');
      if (!rankingArrayJson) return;

      try {
        const rankingArray = JSON.parse(rankingArrayJson);
        const shareText = buildShareText(rankingArray);

        // Try Web Share API first (mobile devices)
        if (navigator.share) {
          try {
            await navigator.share({
              title: 'My Carb Ranking',
              text: shareText,
              url: 'https://isocra.org'
            });
            return; // Successfully shared via native UI
          } catch (err) {
            // User cancelled or share failed, fall back to clipboard
            console.log('Share cancelled or failed, falling back to clipboard');
          }
        }

        // Fallback to clipboard copying (desktop or when Web Share API fails)
        try {
          await navigator.clipboard.writeText(shareText);
        } catch {
          // Fallback for older browsers
          const textArea = document.createElement('textarea');
          textArea.value = shareText;
          document.body.appendChild(textArea);
          textArea.select();
          document.execCommand('copy');
          document.body.removeChild(textArea);
        }

        // Show success feedback
        showButtonFeedback(button, 'Copied!', 'green');
      } catch {
        // Hide button if anything fails
        button.style.display = 'none';
      }
    });
  });

  function showButtonFeedback(button, text, color) {
    const originalHTML = button.innerHTML;
    const originalClasses = button.className;

    button.innerHTML = `
      <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>
      </svg>
      ${text}
    `;

    button.className = originalClasses.replace('bg-amber-600 hover:bg-amber-700', `bg-${color}-600 hover:bg-${color}-700`);

    setTimeout(() => {
      button.innerHTML = originalHTML;
      button.className = originalClasses;
    }, 2000);
  }

  function getCookie(name) {
    const value = `; ${document.cookie}`;
    const parts = value.split(`; ${name}=`);
    if (parts.length === 2) {
      const cookieValue = parts.pop().split(';').shift();
      return decodeURIComponent(cookieValue);
    }
    return null;
  }

  function buildShareText(rankingArray) {
    const carbToEmoji = {
      'bread': '🍞',
      'noodles': '🍜',
      'pasta': '🍝',
      'potato': '🥔',
      'rice': '🍚'
    };

    // Convert carb names to emojis
    const emojiRanking = rankingArray.map(carb => carbToEmoji[carb] || carb).join('');

    // Build the share text
    return `My answer to The Carb Question is ${emojiRanking}. Check it out at https://isocra.org`;
  }
});
</script>
